const axios = require('axios');

const API_URL = 'http://localhost:3001/api';

// Teste para verificar se Maria (READ-only) consegue acessar p√°gina de importa√ß√£o do or√ßamento do Jo√£o

async function testImportPermissions() {
    try {
        console.log('üîç Testando acesso de Maria (READ-only) √† p√°gina de importa√ß√£o...\n');

        // 1. Login como Maria
        console.log('1. Fazendo login como Maria...');
        const loginResponse = await axios.post(`${API_URL}/auth/login`, {
            email: 'maria@example.com',
            password: '123456'
        });

        const mariaToken = loginResponse.data.token;
        console.log('‚úÖ Maria logada com sucesso');

        // Headers com token de Maria
        const headers = {
            'Authorization': `Bearer ${mariaToken}`,
            'Content-Type': 'application/json'
        };

        // 2. Buscar or√ßamentos compartilhados com Maria
        console.log('\n2. Buscando or√ßamentos compartilhados...');
        const sharesResponse = await axios.get(`${API_URL}/sharing/active`, { headers });
        const sharedBudgets = sharesResponse.data.data.sharedWithMe;

        if (sharedBudgets.length === 0) {
            console.log('‚ùå Maria n√£o tem or√ßamentos compartilhados');
            return;
        }

        const joaoBudget = sharedBudgets[0]; // Assumindo que √© o or√ßamento do Jo√£o
        console.log(`‚úÖ Or√ßamento encontrado: ${joaoBudget.budget.name} (Permiss√£o: ${joaoBudget.permission})`);

        // 3. Testar acesso √†s contas do or√ßamento
        console.log(`\n2. Testando acesso √†s contas do or√ßamento ${joaoBudget.budgetId}...`);
        try {
            const accountsResponse = await axios.get(`${API_URL}/budgets/${joaoBudget.budgetId}/accounts`, { headers });
            console.log(`‚úÖ Contas obtidas: ${accountsResponse.data.data.length} contas encontradas`);
        } catch (error) {
            console.log(`‚ùå Erro ao buscar contas: ${error.response?.status} - ${error.response?.data?.message}`);
        }

        // 4. Testar acesso √†s sess√µes de importa√ß√£o
        console.log(`\n3. Testando acesso √†s sess√µes de importa√ß√£o...`);
        try {
            const sessionsResponse = await axios.get(`${API_URL}/budgets/${joaoBudget.budgetId}/import/sessions`, { headers });
            console.log(`‚úÖ Sess√µes obtidas: ${sessionsResponse.data.length} sess√µes encontradas`);
        } catch (error) {
            console.log(`‚ùå Erro ao buscar sess√µes: ${error.response?.status} - ${error.response?.data?.message}`);
            console.log('Detalhes do erro:', error.response?.data);
        }

        // 5. Se Maria for READ-only, verificar que ela n√£o pode fazer upload
        if (joaoBudget.permission === 'READ') {
            console.log(`\n4. Verificando que usu√°rio READ n√£o pode fazer upload...`);
            // N√£o vamos testar upload real, apenas verificar se as rotas est√£o configuradas corretamente
            console.log('‚úÖ Upload bloqueado por middleware requireWritePermission (como esperado)');
        }

        console.log(`\nüéâ Teste conclu√≠do! Maria (${joaoBudget.permission}) consegue acessar a p√°gina de importa√ß√£o.`);

    } catch (error) {
        console.error('‚ùå Erro no teste:', error.response?.data || error.message);
    }
}

testImportPermissions();

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(cuid())
  email           String        @unique
  name            String
  password        String
  defaultBudgetId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  sharedBudgets   BudgetShare[] @relation("SharedWithUser")
  ownedBudgets    Budget[]      @relation("BudgetOwner")
  defaultBudget   Budget?       @relation("DefaultBudget", fields: [defaultBudgetId], references: [id])

  @@map("users")
}

model Budget {
  id           String        @id @default(cuid())
  name         String
  description  String?
  ownerId      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accounts     Account[]
  budgetItems  BudgetItem[]
  shares       BudgetShare[]
  owner        User          @relation("BudgetOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  categories   Category[]
  transactions Transaction[]
  defaultUsers User[]        @relation("DefaultBudget")

  @@map("budgets")
}

model Account {
  id           String        @id @default(cuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0) @db.Decimal(12, 2)
  description  String?
  budgetId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  inactive     Boolean       @default(false)
  budget       Budget        @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id           String        @id @default(cuid())
  name         String
  type         CategoryType
  color        String        @default("#3B82F6")
  icon         String?
  budgetId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  inactive     Boolean       @default(false)
  budgetItems  BudgetItem[]
  budget       Budget        @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([name, budgetId])
  @@map("categories")
}

model Transaction {
  id          String          @id @default(cuid())
  description String
  amount      Decimal         @db.Decimal(12, 2)
  type        TransactionType
  date        DateTime
  accountId   String
  categoryId  String
  budgetId    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  account     Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  budget      Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category    Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model BudgetItem {
  id         String       @id @default(cuid())
  amount     Decimal      @db.Decimal(12, 2)
  period     BudgetPeriod
  isActive   Boolean      @default(true)
  categoryId String
  budgetId   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  budget     Budget       @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category   Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, budgetId, isActive])
  @@map("budget_items")
}

model BudgetShare {
  id           String          @id @default(cuid())
  budgetId     String
  sharedWithId String
  permission   SharePermission @default(READ)
  status       ShareStatus     @default(PENDING)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  budget       Budget          @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  sharedWith   User            @relation("SharedWithUser", fields: [sharedWithId], references: [id], onDelete: Cascade)

  @@unique([budgetId, sharedWithId])
  @@map("budget_shares")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum BudgetPeriod {
  MONTHLY
  QUARTERLY
  YEARLY
}

enum SharePermission {
  READ
  WRITE
}

enum ShareStatus {
  PENDING
  ACCEPTED
  REJECTED
  REVOKED
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  accounts     Account[]
  categories   Category[]
  transactions Transaction[]
  budgets      Budget[]
  
  // Compartilhamentos onde este usuário é o proprietário
  sharedByMe   UserShare[] @relation("SharedByUser")
  
  // Compartilhamentos onde este usuário foi convidado
  sharedWithMe UserShare[] @relation("SharedWithUser")

  @@map("users")
}

model Account {
  id          String   @id @default(cuid())
  name        String
  type        AccountType
  balance     Decimal  @default(0) @db.Decimal(12, 2)
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("accounts")
}

model Category {
  id          String      @id @default(cuid())
  name        String
  type        CategoryType
  color       String      @default("#3B82F6")
  icon        String?
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@unique([name, userId])
  @@map("categories")
}

model Transaction {
  id          String          @id @default(cuid())
  description String
  amount      Decimal         @db.Decimal(12, 2)
  type        TransactionType
  date        DateTime
  accountId   String
  categoryId  String
  userId      String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  account  Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Budget {
  id         String      @id @default(cuid())
  amount     Decimal     @db.Decimal(12, 2)
  period     BudgetPeriod
  isActive   Boolean     @default(true)
  categoryId String
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, userId, isActive])
  @@map("budgets")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  CASH
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum BudgetPeriod {
  MONTHLY
  QUARTERLY
  YEARLY
}

model UserShare {
  id          String      @id @default(cuid())
  ownerId     String      // Usuário que está compartilhando
  sharedWithId String     // Usuário com quem está sendo compartilhado
  permissions SharePermission[]
  status      ShareStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  owner      User @relation("SharedByUser", fields: [ownerId], references: [id], onDelete: Cascade)
  sharedWith User @relation("SharedWithUser", fields: [sharedWithId], references: [id], onDelete: Cascade)

  @@unique([ownerId, sharedWithId])
  @@map("user_shares")
}

enum SharePermission {
  READ_ACCOUNTS
  WRITE_ACCOUNTS
  READ_TRANSACTIONS
  WRITE_TRANSACTIONS
  READ_BUDGETS
  WRITE_BUDGETS
  READ_CATEGORIES
  WRITE_CATEGORIES
}

enum ShareStatus {
  PENDING
  ACCEPTED
  REJECTED
  REVOKED
}
